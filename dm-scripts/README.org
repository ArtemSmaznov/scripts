:PROPERTIES:
:ID:       c9d06930-ec33-4afc-b320-3942fa73e592
:END:
#+title:       dm-scripts
#+author:      Artem Smaznov
#+description: A collection of dmenu scripts
#+startup:     overview
#+auto_tangle: t

* Table of Contents :toc:
- [[#grub-reboot-to-windows][GRUB Reboot to Windows]]
- [[#dm-master][dm-master]]
  - [[#setup][Setup]]
  - [[#dmenu][Dmenu]]
  - [[#handling-input][Handling Input]]
- [[#dm-notify][dm-notify]]
  - [[#dependencies][Dependencies]]
  - [[#setup-1][Setup]]
  - [[#dmenu-1][DMenu]]
  - [[#functions][Functions]]
  - [[#handling-input-1][Handling Input]]
- [[#dm-power][dm-power]]
  - [[#setup-2][Setup]]
  - [[#dmenu-2][DMenu]]
  - [[#functions-1][Functions]]
  - [[#handling-input-2][Handling Input]]
- [[#dm-screenshot][dm-screenshot]]
  - [[#dependencies-1][Dependencies]]
  - [[#setup-3][Setup]]
  - [[#dmenu-3][DMenu]]
  - [[#functions-2][Functions]]
  - [[#handling-input-3][Handling Input]]
- [[#dm-record][dm-record]]
  - [[#setup-4][Setup]]
  - [[#dmenu-4][DMenu]]
  - [[#functions-3][Functions]]
  - [[#audio-capture][Audio Capture]]
  - [[#handling-input-4][Handling Input]]
- [[#dm-wallpaper][dm-wallpaper]]
  - [[#setup-5][Setup]]
  - [[#dmenu-5][DMenu]]
  - [[#action][Action]]
- [[#dm-keys][dm-keys]]
  - [[#dependencies-2][Dependencies]]
  - [[#setup-6][Setup]]
  - [[#dmenu-6][DMenu]]
  - [[#functions-4][Functions]]
  - [[#handling-input-5][Handling Input]]

* GRUB Reboot to Windows
To reboot to windows without having to interact with grub during boot time create an executable shell script that will switch grub next 1 boot to a named entry, in my case it is a custom entry "*Windows 10*", but by default it be something like "*Windows boot manager*" as created by =os-prober=.
- Needs to be run as =sudo=
#+begin_src shell
# /home/user/.local/bin/winreboot

#!/usr/bin/env bash
grub-reboot "Windows 10" && systemctl reboot
#+end_src

If you want to call this from the Desktop Environment you may need to allow the script to be run without the =sudo= password. This can be achieved by adding it to your =sudoers= list as per below.
- It is recommended that you change the owner of the file to root and remove write permissions for other users so it cannot be changed without the root password as this can become a security vulnerability (anything in the script will be executed as =sudo= without a password prompt after all)
- This script is actually called in the [[#power][dmpower]] script with =sudo= to make use of this
#+begin_src conf
# /etc/sudoers.d/00-windows-reboot

user ALL=(ALL) NOPASSWD: /home/user/.local/bin/winreboot
#+end_src

* TODO dm-master
:PROPERTIES:
:header-args: :shebang #!/usr/bin/env bash :tangle dm-master
:END:
Not Working Yet!
Trigger any dm-script
** Setup
#+begin_src shell
declare -a options
#+end_src

Specify the location of dm-scripts
#+begin_src shell
dm_dir="$HOME/.local/bin/dm-scripts"
#+end_src

** Dmenu
#+begin_src shell
prompt="dm-script"
options=($(ls $dm_dir --hide="*.*" --hide="dm-master"))
#+end_src

** Handling Input
Present dmenu to user with options based on the available dmenu scripts
=printf '%s\n'= is used to format the array one item to a line to feed to =dmenu=
#+begin_src shell
# Prompt the user
choice=$(printf '%s\n' "${options[@]}" | wofi --dmenu -p "${prompt}")

# Act on user selection
[ $choice ] && $choice
#+end_src

* dm-notify
:PROPERTIES:
:header-args: :shebang #!/usr/bin/env bash :tangle dm-notify
:END:
Manage notifications
** Dependencies
|-------------+---------------------|
| App         | Comment             |
|-------------+---------------------|
| =wofi --dmenu= | Triggers dmenu      |
| =dunst=       | Notification server |
|-------------+---------------------|

** Setup
Get the number of notifications
#+begin_src shell
declare -a options
#+end_src

** DMenu
#+begin_src shell
prompt="Notifications"
options=(
    "Show recent"
    "Show few recents"
    "Close"
    "Close all"
    "Context menu"
)
#+end_src

** Functions
#+begin_src shell
notif_count_history=7
# notif_count_history=$(dunstctl count history)
notif_count_displayed=$(dunstctl count displayed)
notif_count_wait=$(dunstctl count waiting)

execute_choice() {
    case $1 in
        close) dunstctl close;;
        clear) dunstctl close-all;;
        recent) dunstctl history-pop;;
        recents)
            for ((i = 1; i <= $notif_count_history; i++));
            do
                dunstctl history-pop
            done
            ;;
        ,*) dunstctl context;;
    esac
}
#+end_src

** Handling Input
Execute script without presenting dmenu to the user if any argument was passed
#+begin_src shell
[ ! $# -eq 0 ] && execute_choice $1 && exit
#+end_src

Present dmenu to user with options defined in the [[#dmenu][DMenu]] section
=printf '%s\n'= is used to format the array one item to a line to feed to =dmenu=
#+begin_src shell
choice=$(printf '%s\n' "${options[@]}" | wofi --dmenu -p "${prompt}")
#+end_src

What to do when/if we choose one of the options.
#+begin_src shell
case $choice in
    'Show recent') execute_choice recent ;;
    'Show few recents') execute_choice recents ;;
    'Close') execute_choice close ;;
    'Close all') execute_choice close-all ;;
    'Context menu') execute_choice context ;;
esac
#+end_src

* dm-power
:PROPERTIES:
:header-args: :shebang #!/usr/bin/env bash :tangle dm-power
:END:
Power controls (Suspend, Reboot, Shutdown, etc.)
** Setup
#+begin_src shell
declare -a options
#+end_src

Define =LOCKER= in =.xpwofile= to set to different locker program
#+begin_src shell
if [[ $XDG_SESSION_TYPE == "x11" ]]; then
    LOCKER="$HOME/.config/i3lock/i3lock.sh"
elif [[ $XDG_SESSION_TYPE == "wayland" ]]; then
    LOCKER="swaylock"
fi

# use notify-send if run in dumb term
output="echo"
if [[ ${TERM} == 'dumb' ]]; then
    output="notify-send"
fi

yesno() {
    # shellcheck disable=SC2005
    echo "$(echo -e "No\nYes" | wofi --dmenu -p "${1}")"
}

declare -a managers=(
    "awesome"
    "bspwm"
    "dwm"
    "spectrwm"
    "xmonad"
    "qtile"
)
#+end_src

** DMenu
#+begin_src shell
prompt="Shutdown menu"
declare -a options=(
    "Suspend"
    "Reboot"
    "Shutdown"
    "Logout"
    "Lock screen"
    "Disconnect Controllers"
    "Quit"
)
#+end_src

** Functions
Check [[#grub-reboot-to-windows][GRUB Reboot to Windows]] for the =winreboot= script setup
#+begin_src shell
execute_choice() {
    if [[ $1 == 'lock' ]]; then ${LOCKER}
    elif [[ $1 == 'reboot' ]]; then systemctl reboot
    elif [[ $1 == 'poweroff' ]]; then systemctl poweroff
    elif [[ $1 == 'suspend' ]]; then systemctl suspend
    elif [[ $1 == 'controller' ]]; then ~/.local/bin/disconnect-controller.sh
    elif [[ $1 == 'quit' ]]; then ${output} "Program terminated." && exit 0
    else ${output} "Program terminated." && exit 0
    fi
}
#+end_src

** Handling Input
Execute script without presenting dmenu to the user if any argument was passed
#+begin_src shell
[ ! $# -eq 0 ] && execute_choice $1 && exit
#+end_src

Present dmenu to user with options defined in the [[#dmenu-1][DMenu]] section
=printf '%s\n'= is used to format the array one item to a line to feed to =dmenu=
#+begin_src shell
# Prompt the user
choice=$(printf '%s\n' "${options[@]}" | wofi --dmenu -p "${prompt}")
#+end_src

What to do when/if we choose one of the options.
#+begin_src shell
case $choice in
    'Logout')
        if [[ $(yesno "Logout?") == "Yes" ]]; then
            for manager in "${managers[@]}"; do
                killall "${manager}" || ${output} "Process ${manager} was not running."
            done
        else
            ${output} "User chose not to logout." && exit 1
        fi
        ;;
    'Lock screen') execute_choice lock ;;
    'Reboot')
        if [[ $(yesno "Reboot?") == "Yes" ]]; then
            execute_choice reboot
        else
            ${output} "User chose not to reboot." && exit 0
        fi
        ;;
    'Shutdown')
        if [[ $(yesno "Shutdown?") == "Yes" ]]; then
            execute_choice poweroff
        else
            ${output} "User chose not to shutdown." && exit 0
        fi
        ;;
    'Suspend')
        if [[ $(yesno "Suspend?") == "Yes" ]]; then
            execute_choice suspend
        else
            ${output} "User chose not to suspend." && exit 0
        fi
        ;;
    "Disconnect Controllers")
        ~/.local/bin/disconnect-controller.sh
        ;;
    'Quit') execute_choice quit ;;
    # It is a common practice to use the wildcard asterisk symbol (*) as a final
    # pattern to define the default case. This pattern will always match.
    ,*)
        exit 0
        ;;
esac
#+end_src

* dm-screenshot
:PROPERTIES:
:header-args: :shebang #!/usr/bin/env bash :tangle dm-screenshot
:END:
Take screenshots
** Dependencies
|-----------------+--------------------|
| App             | Comment            |
|-----------------+--------------------|
| =wofi --dmenu=     | Triggers dmenu     |
| =maim=            | Screenshot tool    |
| =xrandr=          | Screen management  |
| =xdotool=         | Get active window  |
| =xclip= / =wl-copy= | Save to clipboard  |
| =paplay=          | Play shutter sound |
|-----------------+--------------------|

** Setup
Set with the flags "-e", "-u","-o pipefail" cause the script to fail if certain
things happen, which is a good thing. Otherwise, we can get hidden bugs that are
hard to discover.
#+begin_src shell
set -euo pipefail
#+end_src

** DMenu
#+begin_src shell
prompt="Screenshot"
options=(
    "Monitor"
    "Area"
    "Window"
    "Desktop"
    "TV"
)
#+end_src

** Functions
#+begin_src shell
main() {
    scope="$1"
    case "$scope" in
        "Monitor") ~/.local/bin/screenshot.sh monitor ;;
        "Area") ~/.local/bin/screenshot.sh area ;;
        "Window") ~/.local/bin/screenshot.sh window ;;
        "Desktop") ~/.local/bin/screenshot.sh desktop ;;
        "TV") ~/.local/bin/screenshot.sh tv ;;
        ,*) echo Invalid input;;
    esac
}
#+end_src

** Handling Input
#+begin_src shell
# execute script without presenting dmenu to the user if any arguments were
# passed to the script
[ ! $# -eq 0 ] && main $1 && exit

# if no arguments were passed, present dmenu to user
choice=$(printf '%s\n' "${options[@]}" | wofi --dmenu -p "${prompt}")

# act on user selection
[ $choice ] && main "$choice"
#+end_src

* dm-record
:PROPERTIES:
:header-args: :shebang #!/usr/bin/env bash :tangle dm-record
:END:
Record video/audio
** Setup
#+begin_src shell
# Track process
proc="/tmp/dm-record"
#+end_src

** DMenu
#+begin_src shell
prompt="Record"
options=(
    "Monitor"
    "Area"
    "Window"
    "Desktop"
    "Camera"
    "Audio"
)
#+end_src

** Functions
#+begin_src shell
start_recording() {
    scope="$1"
    case "$scope" in
        "Monitor") ~/.local/bin/record-screen.sh monitor & echo $! > "$proc" ;;
        "Area") ~/.local/bin/record-screen.sh area & echo $! > "$proc" ;;
        "Window") ~/.local/bin/record-screen.sh window & echo $! > "$proc" ;;
        "Desktop") ~/.local/bin/record-screen.sh desktop & echo $! > "$proc" ;;
        "Camera") echo camera;; # TODO
        "Audio") echo audio_capture;; # REVIEW
        ,*) echo Invalid input;;
    esac
}

stop_recording() {
    pid="$(cat $proc)"

    # kill with SIGINT, allowing finishing touches.
    pkill -INT -P "$pid"
    rm -f "$proc"

    # even after SIGTERM, ffmpeg may still run, so SIGKILL it.
    sleep 3
    pkill -TERM "$pid"
    exit
}
#+end_src

** Audio Capture
Check audio sources with
#+begin_example shell
pactl list sources | grep Name
#+end_example

#+begin_src shell
audio_capture() {
    ffmpeg \
        -f pulse -ac 2 -i $audio_device \
        -codec:a copy \
        $record_dir/dm-$(date $timestamp).wav &
    echo $! > $proc
}
#+end_src

** Handling Input
#+begin_src shell
# check if there is an active recordings and prompt user to stop it
if [ -f $proc ]; then
    if [ $(~/.local/bin/trigger-confirmation.sh "Stop recording?") = "Yes" ]; then
        stop_recording
    else
        exit
    fi

elif [ ! $# -eq 0 ]; then
    # execute script without presenting dmenu to the user if any arguments were
    # passed to the script
    start_recording "$1"

else
    # if no arguments were passed, present dmenu to user
    choice=$(printf '%s\n' "${options[@]}" | wofi --dmenu -p "${prompt}")

    # act on user selection
    [ $choice ] && start_recording $choice
fi
#+end_src

* dm-wallpaper
:PROPERTIES:
:header-args: :shebang #!/usr/bin/env bash :tangle dm-wallpaper
:END:
Set random wallpapers
** Setup
#+begin_src shell
declare -a options

[ ! "$XDG_PICTURES_DIR" ] && export XDG_PICTURES_DIR="$HOME/Pictures"
#+end_src

Specifying a directory with wallpapers and make sure it exists
#+begin_src shell
wallpapers_dir="$XDG_PICTURES_DIR/wallpapers"
#+end_src

** DMenu
Present dmenu to user with options based on the available sub-directories in =$wall_dir=
=printf '%s\n'= is used to format the array one item to a line to feed to =dmenu=
#+begin_src shell
prompt="Wallpaper Category"
options=("$(ls "$wallpapers_dir" --hide="*.*")")
#+end_src

Prompt the user
#+begin_src shell
choice=$(printf '%s\n' "-refresh" "${options[@]}" | wofi --dmenu -p "${prompt}")
#+end_src

** Action
Act on user selection
#+begin_src shell
case $choice in
    '') exit 1 ;;
    '-refresh') ~/.local/bin/set-wallpaper.sh ;;
    *) ~/.local/bin/set-wallpaper.sh "$choice" ;;
esac
#+end_src

* dm-keys
:PROPERTIES:
:header-args: :shebang #!/usr/bin/env bash :tangle dm-keys
:END:
Record video/audio
** Dependencies
|-----------+------------------------------|
| App       | Comment                      |
|-----------+------------------------------|
| [[https://archlinux.org/packages/?name=screenkey][screenkey]] | Tool to display pressed keys |
|-----------+------------------------------|

#+begin_example shell
sudo pacman -S screenkeys
#+end_example

** Setup
Tracking process
#+begin_src shell
position='bottom'
#+end_src

** DMenu
#+begin_src shell
prompt="screenkey"
options=(
    "toggle"
    "swap-position"
)
#+end_src

** Functions
*** Grabber Selection
#+begin_src shell
key_grabber() {
    case "$1" in
        toggle) toggle_grabber;;
        "swap-position") swap_position;;
        *) echo Invalid input;;
    esac
}
#+end_src

*** Toggle Grabber
#+begin_src shell
toggle_grabber() {
    if pgrep -x screenkey > /dev/null
    then killall screenkey
    else screenkey --position $position
    fi
}
#+end_src

*** Refresh
#+begin_src shell
refresh() {
    if pgrep -x screenkey > /dev/null
    then killall screenkey && screenkey --position $position
    else screenkey --position $position
    fi
}
#+end_src

*** Swap Position
#+begin_src shell
swap_position() {
    position='top'
    refresh
}
#+end_src

** Handling Input
Check if any arguments were passed to the script to avoid triggering dmenu
#+begin_src shell
if [ ! $# -eq 0 ]
#+end_src

Execute script without presenting dmenu to the user if an argument was passed
#+begin_src shell
then key_grabber $1
#+end_src

If no arguments were passed, present dmenu to user
=printf '%s\n'= is used to format the array one item to a line to feed to =dmenu=
#+begin_src shell
else
    # Prompt the user
    choice=$(printf '%s\n' "${options[@]}" | wofi --dmenu -p "${prompt}")

    # Act on user selection
    [ $choice ] && key_grabber $choice
fi
#+end_src
