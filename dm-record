#!/usr/bin/env bash
record_dir="$(xdg-user-dir VIDEOS)/recordings"
resolution='1920x1080'
timestamp='+%Y-%m-%d_%T'
fps='30'

rec_proc="/tmp/recordingpid"

prompt="Record"
options=(
    "Screen"
    "Audio"
    "Camera"
)

yesno() {
    echo "$(echo -e "No\nYes" | rofi -dmenu -i -p "${1}")"
}

start_recording() {
    case "$1" in
        Screen) screen_capture;;
        Audio) echo audio;;
        Camera) echo camera;;
        *) echo Invalid input;;
    esac
}

stop_recording() {
    rec_pid="$(cat $rec_proc)"

    # kill with SIGTERM, allowing finishing touches.
    kill -15 "$rec_pid"
    rm -f $rec_proc

    # even after SIGTERM, ffmpeg may still run, so SIGKILL it.
    sleep 3
    kill -9 "$rec_pid"
    exit
}

# check audio sources with pactl list sources | grep Name
screen_capture() {
    ffmpeg \
        -video_size $resolution -framerate $fps \
        -f x11grab -i "$DISPLAY" \
        -f pulse -ac 2 -i alsa_output.usb-Focusrite_Scarlett_2i2_USB_Y86EP6H211E46C-00.analog-stereo.monitor \
        -codec:v libx264 -preset ultrafast \
        -codec:a copy \
        $record_dir/dm-$(date $timestamp).mkv &
    echo $! > $rec_proc
}

if [ -f $rec_proc ]
then [ $(yesno "Stop Active Recording?") = "Yes" ] && stop_recording || exit

elif [ ! $# -eq 0 ]

then start_recording $1

else
    # Prompt the user
    choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "${prompt}")

    # Act on user selection
    [ $choice ] && start_recording $choice
fi
