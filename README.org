#+title:       Scripts
#+author:      Artem Smaznov
#+description: Miscalenious scripts
#+startup:     overview
#+property:    header-args :shebang #!/usr/bin/env bash
#+auto_tangle: t

* Table of Contents :toc:
- [[#auto-start][auto-start]]
  - [[#xorg][Xorg]]
  - [[#wayland][Wayland]]
  - [[#global][Global]]
- [[#get-battery][get-battery]]
- [[#get-ip][get-ip]]
- [[#get-lang][get-lang]]
- [[#get-music][get-music]]
- [[#get-mute][get-mute]]
- [[#get-network-interface][get-network-interface]]
- [[#get-trayer-width][get-trayer-width]]
- [[#get-updates][get-updates]]
- [[#get-uptime][get-uptime]]
- [[#get-volume][get-volume]]
- [[#listen-current-workspace][listen-current-workspace]]
- [[#listen-title][listen-title]]
- [[#listen-wm-layout][listen-wm-layout]]
- [[#listen-wm-title][listen-wm-title]]
- [[#listen-wm-workspaces][listen-wm-workspaces]]
- [[#set-lang][set-lang]]
- [[#set-volume][set-volume]]
- [[#set-wallpaper][set-wallpaper]]
- [[#toggle-lang][toggle-lang]]
- [[#toggle-mute][toggle-mute]]

* auto-start
:PROPERTIES:
:header-args: :shebang #!/usr/bin/env bash :tangle auto-start.sh
:END:
Startup Sound
#+begin_src shell
paplay "$HOME/public/audio/windows95-startup.wav" &
#+end_src

** Xorg
#+begin_src shell
if [[ $XDG_SESSION_TYPE == "x11" ]]; then
    # wallpaper
    ~/.local/bin/dm-scripts/dm-wallpaper -refresh &

    # screen locker
    # xscreensaver -no-splash &
    # xautolock -time 60 -locker "$HOME/.config/i3lock/i3lock.sh" &
    xss-lock -- "$HOME/.config/i3lock/i3lock.sh" &

    # compositor
    picom -b &

    # notification daemon
    dunst &

    # hide cursor
    unclutter -jitter 5 &

    # blue screen filter
    redshift-gtk &
fi
#+end_src

** Wayland
#+begin_src shell
# if [[ $XDG_SESSION_TYPE == "wayland" ]]; then
# fi
#+end_src

** Global
System Utilities
#+begin_src shell
nm-applet &
blueman-applet &
nextcloud &
#+end_src

Japanese Language Input
#+begin_src shell
fcitx5 -d &
#+end_src

Background Apps
#+begin_src shell
# emacs --daemon &
#+end_src

Launch Apps
#+begin_src shell
/usr/bin/steam-runtime %U &
emacsclient -c -a 'emacs' &
alacritty --class ncmpcpp -e ncmpcpp &
alacritty --class btop -e btop &
qutebrowser &
#+end_src

* get-battery
List available batteries
#+begin_example shell
upower -e
#+end_example

metric:
+ percentage
+ present
+ state
+ warning-level

device:
+ battery_ps_controller_battery_a0oabo51o62o65o1d
#+begin_src shell :tangle get-battery.sh
metric=$1
device=$2

# upower -i "/org/freedesktop/UPower/devices/battery_ps_controller_battery_a0oabo51o62o65o1d"
upower -i "/org/freedesktop/UPower/devices/$device" | grep $metric | awk '{print $2}' | sed 's/%//'
#+end_src

* get-ip
#+begin_src shell :tangle get-ip.sh
# curl -s https://ipinfo.io/ip
curl -s ifconfig.co
#+end_src

* get-lang
#+begin_src shell :tangle get-lang.sh
setxkbmap -query | awk '$1=="layout:" {print $2}'
#+end_src

* get-music
#+begin_src shell :tangle get-music.sh
usage="""Usage:
    get-music.sh song
    get-music.sh state
    get-music.sh flags """

convert_flag() {
    if [[ $(mpc status "%$1%") == "on" ]]
    then echo $2
    else echo -
    fi
}

get_flags() {
    echo "[$(convert_flag repeat r)$(convert_flag random z)$(convert_flag single s)$(convert_flag consume c)]"
}

case $1 in
    song) mpc current -f "%artist% - %title%";;
    state) mpc status "%state%";;
    flags) get_flags;;
    ,*) echo "$usage"
esac
#+end_src

* get-mute
#+begin_src shell :tangle get-mute.sh
stream=$( amixer sget Master | grep "%" | awk -F'[][]' '{print $4}' | sort -u )
if [ $stream == "on" ]
then echo off
else echo on
fi
#+end_src

* get-network-interface
#+begin_src shell :tangle get-network-interface.sh
route |
    grep default |
    head -1 |
    awk '{print $8}'
#+end_src

* get-trayer-width
#+begin_src shell :tangle get-trayer-width.sh
if [ $(pidof trayer) ]
then xprop -name panel | grep 'program specified minimum size' | awk '{print $5}'
else echo 0
fi
#+end_src

* get-updates
#+begin_src shell :tangle get-updates.sh
checkupdates | wc -l
#+end_src

* get-uptime
#+begin_src shell :tangle get-uptime.sh
uptime --pretty \
    | sed -e 's/up //' \
          -e 's/ \([a-z]\)\w*,*/\1/g' \
    | awk '{print $1 " " $2}'
#+end_src

* get-volume
#+begin_src shell :tangle get-volume.sh
amixer sget Master | grep "%" | awk -F'[][]' '{print $2}' | tr -d '%' | sort -r | head -1
#+end_src

* listen-current-workspace
active workspace
#+begin_src shell :tangle listen-current-workspace.sh
xprop -spy -root _NET_CURRENT_DESKTOP |
    while read workspace_index; do
        echo $workspace_index |
            awk '{print $3}'
    done
#+end_src

* listen-title
#+begin_src shell :tangle listen-title.sh
xprop -spy -root _NET_ACTIVE_WINDOW |
    while read window_id
    do
        echo $window_id |
            awk '{print "getwindowname " $5}' |
            xdotool -
    done
#+end_src

* listen-wm-layout
#+begin_src shell :tangle listen-wm-layout.sh
if [[ $DESKTOP_SESSION == "xmonad" ]]
then
    xprop -spy -root _XMONAD_LOG |
        stdbuf -oL sed 's/^.*= //' |
        stdbuf -oL sed 's/^"\(.*\)"$/\1/' |
        stdbuf -oL awk -F'::::' '{ print $2 }'
fi

exit 0
#+end_src

* listen-wm-title
#+begin_src shell :tangle listen-wm-title.sh
if [[ $DESKTOP_SESSION == "xmonad" ]]
then
    xprop -spy -root _XMONAD_LOG |
        stdbuf -oL sed 's/^.*= //' |
        stdbuf -oL sed 's/^"\(.*\)"$/\1/' |
        stdbuf -oL awk -F'::::' '{ print $3 }'
fi

exit 0
#+end_src

* listen-wm-workspaces
#+begin_src shell :tangle listen-wm-workspaces.sh
if [[ $DESKTOP_SESSION == "xmonad" ]]
then
    xprop -spy -root _XMONAD_LOG |
        stdbuf -oL sed 's/^.*= //' |
        stdbuf -oL sed 's/^"\(.*\)"$/\1/' |
        stdbuf -oL awk -F'::::' "{ print \$1 }"
fi

exit 0
#+end_src

#+begin_src shell :tangle listen-wm-workspaces.sh :tangle no
if [[ $DESKTOP_SESSION == "xmonad" ]]
then
    xprop -spy -root _XMONAD_LOG |
        stdbuf -oL sed 's/^.*= //' |
        stdbuf -oL sed 's/^"\(.*\)"$/\1/' |
        stdbuf -oL awk -F'::::' "{ print \"[\\\"\" \$1 \"\\\"]\" }" |
        stdbuf -oL sed 's/ /\", \"/g'
fi

exit 0
#+end_src

* set-lang
#+begin_src shell :tangle set-lang.sh
#
# Usage: set-lang.sh [language]
# Examples:
# - set-lang.sh jp
# - set-lang.sh en

setxkbmap -layout $1

if [[ $(eww ping 2> /dev/null) == "pong" ]]
then eww update kbd=$1
fi
#+end_src

* set-volume
#+begin_src shell :tangle set-volume.sh
#
# Usage: set-volume.sh [+-] [%step]
# Examples:
# - set-volume.sh + 2
# - set-volume.sh - 1

direction=$1
step=$2

amixer -q sset Master ${step}%${direction} unmute
#+end_src

* set-wallpaper
#+begin_src shell :tangle set-wallpaper.sh
#
# Inputs
wallpaper_category=$1

if [ ! "$XDG_STATE_HOME" ]; then
    export XDG_STATE_HOME="$HOME/.local/state"
fi
wallpaper_category_file="$XDG_STATE_HOME/wallpaper"

if [ ! "$XDG_PICTURES_DIR" ]; then
    export XDG_PICTURES_DIR="$HOME/pictures"
fi
wallpapers_dir="$XDG_PICTURES_DIR/wallpapers"

#===============================================================================

function getLastCategory {
    last_category="faded"
    if [ -f "$wallpaper_category_file" ]; then
        last_category=$(cat "$wallpaper_category_file")
    fi
}

function handleCategoryInput {
    wallpaper_category="$1"
    if [ ! "$wallpaper_category" ]; then
        wallpaper_category="$last_category"
    fi
}

function updateStateFile {
    caterogy="$1"
    echo "$caterogy" >"$wallpaper_category_file"
}

function selectRandomWallpaper {
    category="$1"
    wallpaper=$(find "$wallpapers_dir/$category" -type f,l | shuf -n 1)
}

#-------------------------------------------------------------------------------
# Xorg

function setNitrogen {
    monitors=$(xrandr --query | grep -e '\sconnected' | awk '{print $1}')

    for monitor in $monitors; do
        nitrogen --set-zoom-fill --random --head="$monitor" "$wallpapers_dir/$wallpaper_category"
    done
}

#-------------------------------------------------------------------------------
# Wayland

function setHyprPaper {
    monitors=$(hyprctl -j monitors | jq -r '.[].name')

    if [ ! "$(pidof hyprpaper)" ]; then
        hyprpaper &
    fi

    hyprctl hyprpaper unload all

    for monitor in $monitors; do
        selectRandomWallpaper "$wallpaper_category"
        hyprctl hyprpaper preload "$wallpaper"
        hyprctl hyprpaper wallpaper "$monitor,$wallpaper"
    done
}

#===============================================================================

getLastCategory
handleCategoryInput "$wallpaper_category"
updateStateFile "$wallpaper_category"

if [[ $XDG_SESSION_TYPE == "x11" ]]; then
    export DISPLAY=":0"
    setNitrogen
fi

if [[ $XDG_SESSION_TYPE == "wayland" ]]; then
    # if [[ $XDG_DESKTOP_SESSION == "hyprland" ]]; then
    # if [[ $XDG_SESSION_DESKTOP == "Hyprland" ]]; then
    if [[ $XDG_CURRENT_DESKTOP == "Hyprland" ]]; then
        setHyprPaper
    fi
fi
#+end_src

* toggle-lang
#+begin_src shell :tangle toggle-lang.sh
case $($HOME/.local/bin/get-lang.sh) in
    "us") new_lang="ru" ;;
    "ru") new_lang="jp" ;;
    "jp") new_lang="us" ;;
    ,*)   new_lang="us" ;;
esac

$HOME/.local/bin/set-lang.sh $new_lang

if [[ $new_lang == 'jp' ]]
then fcitx5-remote -o # enable japanese
else fcitx5-remote -c # disable japanese
fi
#+end_src

* toggle-mute
#+begin_src shell :tangle toggle-mute.sh
amixer -q sset Master toggle
#+end_src

