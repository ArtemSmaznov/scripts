#+title:       Scripts
#+author:      Artem Smaznov
#+description: Miscalenious scripts
#+startup:     overview
#+property:    header-args :shebang #!/usr/bin/env bash
#+auto_tangle: t

* Table of Contents :toc:
- [[#auto-start][auto-start]]
  - [[#xorg][Xorg]]
  - [[#wayland][Wayland]]
  - [[#global][Global]]
- [[#cast-to-tv][cast-to-tv]]
- [[#get-battery][get-battery]]
- [[#get-geometry-area][get-geometry-area]]
- [[#get-geometry-desktop][get-geometry-desktop]]
- [[#get-geometry-monitor][get-geometry-monitor]]
- [[#get-geometry-window][get-geometry-window]]
- [[#get-ip][get-ip]]
- [[#get-lang][get-lang]]
- [[#get-wm-layout][get-wm-layout]]
- [[#get-music][get-music]]
- [[#get-mute][get-mute]]
- [[#get-network-interface][get-network-interface]]
- [[#get-timestamp][get-timestamp]]
- [[#get-trayer-width][get-trayer-width]]
- [[#get-updates][get-updates]]
- [[#get-uptime][get-uptime]]
- [[#get-volume][get-volume]]
- [[#listen-current-workspace][listen-current-workspace]]
- [[#listen-title][listen-title]]
- [[#listen-wm-layout][listen-wm-layout]]
- [[#listen-wm-title][listen-wm-title]]
- [[#listen-wm-workspaces][listen-wm-workspaces]]
- [[#record-screen][record-screen]]
- [[#screenshot][screenshot]]
- [[#scan-playlists][scan-playlists]]
- [[#save-to-clipboard][save-to-clipboard]]
- [[#set-lang][set-lang]]
- [[#set-volume][set-volume]]
- [[#set-wallpaper][set-wallpaper]]
- [[#toggle-lang][toggle-lang]]
- [[#toggle-mute][toggle-mute]]
- [[#trigger-confirmation][trigger-confirmation]]
- [[#trigger-countdown][trigger-countdown]]

* auto-start
:PROPERTIES:
:header-args: :shebang #!/usr/bin/env bash :tangle auto-start.sh
:END:
Startup Sound
#+begin_src shell
paplay "$HOME/public/audio/windows95-startup.wav" &
#+end_src

** Xorg
#+begin_src shell
if [[ $XDG_SESSION_TYPE == "x11" ]]; then
    # screen locker
    # xscreensaver -no-splash &
    # xautolock -time 60 -locker "$HOME/.config/i3lock/i3lock.sh" &
    xss-lock -- "$HOME/.config/i3lock/i3lock.sh" &

    # compositor
    picom -b &

    # notification daemon
    dunst &

    # hide cursor
    unclutter -jitter 5 &

    # blue screen filter
    redshift-gtk &
fi
#+end_src

** Wayland
#+begin_src shell
# if [[ $XDG_SESSION_TYPE == "wayland" ]]; then
# fi
#+end_src

** Global
System Utilities
#+begin_src shell
emacs --daemon &
nm-applet &
blueman-applet &
nextcloud &
#+end_src

Japanese Language Input
#+begin_src shell
fcitx5 -d &
#+end_src

Launch Apps
#+begin_src shell
/usr/bin/steam-runtime %U &
alacritty --class ncmpcpp -e ncmpcpp &
alacritty --class btop -e btop &
qutebrowser &
emacsclient -c &
#+end_src

Wallpaper
#+begin_src shell
sleep 3 && "$HOME/.local/bin/set-wallpaper.sh" &
#+end_src

* cast-to-tv
#+begin_src shell :tangle cast-to-tv.sh
media_url="$1"

# variables
#-------------------------------------------------------------------------------
remote_host=shield
remote_port=5555
adb_device="$(~/.local/bin/get-ip.sh $remote_host):$remote_port"

# execution
#===============================================================================
adb -s "$adb_device" shell am start -a android.intent.action.VIEW -d "$media_url"
#+end_src

* get-battery
List available batteries
#+begin_example shell
upower -e
#+end_example

metric:
+ percentage
+ present
+ state
+ warning-level

device:
+ battery_ps_controller_battery_a0oabo51o62o65o1d
#+begin_src shell :tangle get-battery.sh
metric=$1
device=$2

# upower -i "/org/freedesktop/UPower/devices/battery_ps_controller_battery_a0oabo51o62o65o1d"
upower -i "/org/freedesktop/UPower/devices/$device" | grep $metric | awk '{print $2}' | sed 's/%//'
#+end_src

* get-geometry-area
#+begin_src shell :tangle get-geometry-area.sh
slurp
#+end_src

* get-geometry-desktop
#+begin_src shell :tangle get-geometry-desktop.sh
if [[ $XDG_SESSION_TYPE == "wayland" ]]; then
    if [[ $XDG_CURRENT_DESKTOP == "Hyprland" ]]; then
        exit
    fi
fi
exit
#+end_src

* get-geometry-monitor
#+begin_src shell :tangle get-geometry-monitor.sh
if [[ $XDG_SESSION_TYPE == "x11" ]]; then
    displays=$(xrandr --listactivemonitors | grep '+' | awk '{print $4, $3}' | awk -F'[x/+* ]' '{print $1,$2"x"$4"+"$6"+"$7}')

    IFS=$'\n'
    declare -A display_mode

    for d in ${displays}; do
        name=$(echo "${d}" | awk '{print $1}')
        area="$(echo "${d}" | awk '{print $2}')"
        display_mode[${name}]="${area}"
    done

    unset IFS
fi

if [[ $XDG_SESSION_TYPE == "wayland" ]]; then
    if [[ $XDG_CURRENT_DESKTOP == "Hyprland" ]]; then
        # active_monitor=$(hyprctl -j activewindow | jq -r .monitor)
        # hyprctl -j monitors | jq -r '.[] | select(.id | contains(0))' | jq -r '"\(.x),\(.y) \(.width)x\(.height)"'
        exit
    fi
fi
exit
#+end_src

* get-geometry-window
#+begin_src shell :tangle get-geometry-window.sh
if [[ $XDG_SESSION_TYPE == "x11" ]]; then
    # xdotool getactivewindow
    echo 0
fi

if [[ $XDG_SESSION_TYPE == "wayland" ]]; then
    if [[ $XDG_CURRENT_DESKTOP == "Hyprland" ]]; then
        hyprctl -j activewindow | jq -r '"\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"'
    fi
fi
#+end_src

* get-ip
#+begin_src shell :tangle get-ip.sh
target="$1"

if [[ ! $target ]]; then
    # curl -s https://ipinfo.io/ip
    curl -s ifconfig.co
    exit
fi

host $target | awk '{ print $4 }'
#+end_src

* get-lang
#+begin_src shell :tangle get-lang.sh
if [[ $XDG_SESSION_TYPE == "x11" ]]; then
    setxkbmap -query | awk '$1=="layout:" {print $2}'
fi

if [[ $XDG_SESSION_TYPE == "wayland" ]]; then
    # if [[ $XDG_DESKTOP_SESSION == "hyprland" ]]; then
    # if [[ $XDG_SESSION_DESKTOP == "Hyprland" ]]; then
    if [[ $XDG_CURRENT_DESKTOP == "Hyprland" ]]; then
        hyprctl -j devices | jq -r '.keyboards[] | select(.name | contains("wlr")) .active_keymap'
    fi
fi
#+end_src

* get-wm-layout
#+begin_src shell :tangle get-wm-layout.sh
if [[ $XDG_SESSION_TYPE == "wayland" ]]; then
    if [[ $XDG_SESSION_DESKTOP == "Hyprland" ]]; then
        hyprctl getoption -j general:layout | jq -r .str
    fi
fi
#+end_src

* get-music
#+begin_src shell :tangle get-music.sh
usage="""Usage:
    get-music.sh song
    get-music.sh state
    get-music.sh flags """

convert_flag() {
    if [[ $(mpc status "%$1%") == "on" ]]
    then echo $2
    else echo -
    fi
}

get_flags() {
    echo "[$(convert_flag repeat r)$(convert_flag random z)$(convert_flag single s)$(convert_flag consume c)]"
}

case $1 in
    song) mpc current -f "%artist% - %title%";;
    state) mpc status "%state%";;
    flags) get_flags;;
    ,*) echo "$usage"
esac
#+end_src

* get-mute
#+begin_src shell :tangle get-mute.sh
stream=$( amixer sget Master | grep "%" | awk -F'[][]' '{print $4}' | sort -u )
if [ $stream == "on" ]
then echo off
else echo on
fi
#+end_src

* get-network-interface
#+begin_src shell :tangle get-network-interface.sh
route |
    grep default |
    head -1 |
    awk '{print $8}'
#+end_src

* get-timestamp
#+begin_src shell :tangle get-timestamp.sh
timestamp='+%Y%m%d-%H%M%S'
date "$timestamp"
#+end_src

* get-trayer-width
#+begin_src shell :tangle get-trayer-width.sh
if [ $(pidof trayer) ]
then xprop -name panel | grep 'program specified minimum size' | awk '{print $5}'
else echo 0
fi
#+end_src

* get-updates
#+begin_src shell :tangle get-updates.sh
checkupdates | wc -l
#+end_src

* get-uptime
#+begin_src shell :tangle get-uptime.sh
uptime --pretty \
    | sed -e 's/up //' \
          -e 's/ \([a-z]\)\w*,*/\1/g' \
    | awk '{print $1 " " $2}'
#+end_src

* get-volume
#+begin_src shell :tangle get-volume.sh
amixer sget Master | grep "%" | awk -F'[][]' '{print $2}' | tr -d '%' | sort -r | head -1
#+end_src

* listen-current-workspace
active workspace
#+begin_src shell :tangle listen-current-workspace.sh
xprop -spy -root _NET_CURRENT_DESKTOP |
    while read workspace_index; do
        echo $workspace_index |
            awk '{print $3}'
    done
#+end_src

* listen-title
#+begin_src shell :tangle listen-title.sh
xprop -spy -root _NET_ACTIVE_WINDOW |
    while read window_id
    do
        echo $window_id |
            awk '{print "getwindowname " $5}' |
            xdotool -
    done
#+end_src

* listen-wm-layout
#+begin_src shell :tangle listen-wm-layout.sh
if [[ $DESKTOP_SESSION == "xmonad" ]]; then
    xprop -spy -root _XMONAD_LOG |
        stdbuf -oL sed 's/^.*= //' |
        stdbuf -oL sed 's/^"\(.*\)"$/\1/' |
        stdbuf -oL awk -F'::::' '{ print $2 }'
fi

exit 0
#+end_src

* listen-wm-title
#+begin_src shell :tangle listen-wm-title.sh
if [[ $DESKTOP_SESSION == "xmonad" ]]
then
    xprop -spy -root _XMONAD_LOG |
        stdbuf -oL sed 's/^.*= //' |
        stdbuf -oL sed 's/^"\(.*\)"$/\1/' |
        stdbuf -oL awk -F'::::' '{ print $3 }'
fi

exit 0
#+end_src

* listen-wm-workspaces
#+begin_src shell :tangle listen-wm-workspaces.sh
if [[ $DESKTOP_SESSION == "xmonad" ]]
then
    xprop -spy -root _XMONAD_LOG |
        stdbuf -oL sed 's/^.*= //' |
        stdbuf -oL sed 's/^"\(.*\)"$/\1/' |
        stdbuf -oL awk -F'::::' "{ print \$1 }"
fi

exit 0
#+end_src

#+begin_src shell :tangle listen-wm-workspaces.sh :tangle no
if [[ $DESKTOP_SESSION == "xmonad" ]]
then
    xprop -spy -root _XMONAD_LOG |
        stdbuf -oL sed 's/^.*= //' |
        stdbuf -oL sed 's/^"\(.*\)"$/\1/' |
        stdbuf -oL awk -F'::::' "{ print \"[\\\"\" \$1 \"\\\"]\" }" |
        stdbuf -oL sed 's/ /\", \"/g'
fi

exit 0
#+end_src

* record-screen
#+begin_src shell :tangle record-screen.sh
scope="$1"

[ ! "$XDG_VIDEOS_DIR" ] && export XDG_VIDEOS_DIR="$HOME/Videos"

record_dir="$XDG_VIDEOS_DIR/recordings"
record_name="recording"
record_format="mp4"
record_file="$record_dir/$record_name-$(~/.local/bin/get-timestamp.sh).$record_format"
record_delay=3

mkdir -p "${record_dir}"

# Audio Settings
audio_device='alsa_output.usb-Focusrite_Scarlett_2i2_USB_Y86EP6H211E46C-00.analog-stereo.monitor'

#-------------------------------------------------------------------------------
# Xorg

# Video Settings
resolution='1920x1080'
fps='30'

xorg_capture() {
    ffmpeg \
        -video_size $resolution -framerate $fps \
        -f x11grab -i "$DISPLAY" \
        -f pulse -ac 2 -i $audio_device \
        -codec:v libx264 -preset ultrafast \
        -codec:a copy \
        $record_dir/screenrecording-$(~/.local/bin/get-timestamp.sh).mkv
}

#-------------------------------------------------------------------------------

case $scope in
    monitor)
        message="Active monitor"
        geometry=$(~/.local/bin/get-geometry-monitor.sh) || exit 1
        ;;
    area)
        message="Area selection"
        geometry=$(~/.local/bin/get-geometry-area.sh) || exit 1
        ;;
    window)
        message="Active window"
        geometry=$(~/.local/bin/get-geometry-window.sh) || exit 1
        ;;
    desktop)
        message="Full desktop"
        geometry=$(~/.local/bin/get-geometry-desktop.sh) || exit 1
        ;;
    ,*)
        echo -e """error: invalid option '$scope'

accepted options:
  - monitor
  - area
  - window
  - desktop"""
        exit 1
        ;;
esac

#===============================================================================

~/.local/bin/trigger-countdown.sh $record_delay

if [[ $geometry ]]; then
    wf-recorder --audio="$audio_device" --file="$record_file" -g "$geometry" || exit 1
else
    wf-recorder --audio="$audio_device" --file="$record_file" || exit 1
fi

notify-send --urgency=low "Recording saved!" "$message"
#+end_src

* screenshot
#+begin_src shell :tangle screenshot.sh
scope="$1"

# env variables
#-------------------------------------------------------------------------------
[ ! "$XDG_PICTURES_DIR" ] && export XDG_PICTURES_DIR="$HOME/Pictures"

# variables
#-------------------------------------------------------------------------------
screen_dir="$XDG_PICTURES_DIR/screenshots"
screen_name="screenshot"
screen_format="png"

shutter="/usr/share/sounds/freedesktop/stereo/camera-shutter.oga"

# functions
#-------------------------------------------------------------------------------
set_screen_file() {
    timestamp=$(~/.local/bin/get-timestamp.sh)
    screen_file="$screen_dir/$screen_name-$timestamp.$screen_format"
}

screenshot_wayland() {
    set_screen_file
    if [[ ! $geometry ]]; then
        grim "$screen_file" || exit 1
    else
        grim -g "$geometry" "$screen_file" || exit 1
    fi

    paplay "$shutter"
}

screenshot_xorg() {
    exit 1
    maim -u --geometry "$geometry" | tee "$screen_file" | ~/.local/bin/save-to-clipboard.sh image/png || exit 1
    maim -u --capturebackground -i $(xdotool getactivewindow) | tee "$screen_file" | ~/.local/bin/save-to-clipboard.sh image/png || exit 1
    maim -u --capturebackground --select -n | tee "$screen_file" | ~/.local/bin/save-to-clipboard.sh image/png || exit 1
    maim -u | tee "$screen_file" | ~/.local/bin/save-to-clipboard.sh image/png || exit 1
}

screenshot_android() {
    remote_host="$1"
    remote_port="$2"

    screen_name="tv-screenshot"
    screen_format="png"
    set_screen_file

    remote_dir="/sdcard/Pictures/Screenshots"
    remote_file="$remote_dir/$screen_name.$screen_format"

    adb_device="$(~/.local/bin/get-ip.sh $remote_host):$remote_port"

    adb -s "$adb_device" shell mkdir -p "$remote_dir"
    adb -s "$adb_device" shell screencap -p "$remote_file"
    paplay "$shutter"
    adb -s "$adb_device" pull "$remote_file" "$screen_file"
    adb -s "$adb_device" shell rm "$remote_file"
}

# setup
#-------------------------------------------------------------------------------
case $scope in
    monitor)
        message="Active monitor"
        geometry=$(~/.local/bin/get-geometry-monitor.sh) || exit 1
        ;;
    area)
        message="Area selection"
        geometry=$(~/.local/bin/get-geometry-area.sh) || exit 1
        ;;
    window)
        message="Active window"
        geometry=$(~/.local/bin/get-geometry-window.sh) || exit 1
        ;;
    desktop)
        message="Full desktop"
        geometry=$(~/.local/bin/get-geometry-desktop.sh) || exit 1
        ;;
    tv)
        message="TV"
        ;;
    ,*)
        echo -e """error: invalid option '$scope'

accepted options:
  - monitor
  - area
  - window
  - desktop
  - tv"""
        exit 1
        ;;
esac

# execution
#===============================================================================
mkdir -p "${screen_dir}"

case $scope in
    tv) screenshot_android shield 5555 ;;
    ,*) case $XDG_SESSION_TYPE in
           wayland) screenshot_wayland ;;
           x11) screenshot_xorg ;;
       esac
       ;;
esac

notify-send --urgency low "Screenshot saved!" "$message" --icon "$screen_file"
#+end_src

* scan-playlists
#+begin_src shell :tangle scan-playlists.sh
music_dir="$XDG_MUSIC_DIR"
playlists_dir="$XDG_CONFIG_HOME/mpd/playlists"

cd "$music_dir" || exit 1

echo "broken song links"
for playlist in "$playlists_dir"/*; do
    playlist=$(basename "$playlist" .m3u)

    while read -r song; do
        ls "$song" &>/dev/null || echo "$playlist: $song"
    done <"$playlists_dir/$playlist.m3u"
done
#+end_src

* save-to-clipboard
#+begin_src shell :tangle save-to-clipboard.sh
type="$1" # image/png
# screenshot.sh monitor | save-to-clipboard.sh image/png

case "$XDG_SESSION_TYPE" in
    'x11') xclip -selection clipboard -t "$type" ;;
    'wayland') wl-copy -t "$type" ;;
    ,*) err "Unknown display server" ;;
esac
#+end_src

* set-lang
#+begin_src shell :tangle set-lang.sh
#
# Usage: set-lang.sh [language]
# Examples:
# - set-lang.sh jp
# - set-lang.sh en

setxkbmap -layout $1

if [[ $(eww ping 2> /dev/null) == "pong" ]]
then eww update kbd=$1
fi
#+end_src

* set-volume
#+begin_src shell :tangle set-volume.sh
#
# Usage: set-volume.sh [+-] [%step]
# Examples:
# - set-volume.sh + 2
# - set-volume.sh - 1

direction=$1
step=$2

amixer -q sset Master ${step}%${direction} unmute
#+end_src

* set-wallpaper
#+begin_src shell :tangle set-wallpaper.sh
#
# Inputs
wallpaper_category=$1

[ ! "$XDG_PICTURES_DIR" ] && export XDG_PICTURES_DIR="$HOME/Pictures"
[ ! "$XDG_STATE_HOME" ] && export XDG_STATE_HOME="$HOME/.local/state"

wallpaper_category_file="$XDG_STATE_HOME/wallpaper"
wallpapers_dir="$XDG_PICTURES_DIR/wallpapers"

#===============================================================================

function getLastCategory {
    last_category="faded"
    if [ -f "$wallpaper_category_file" ]; then
        last_category=$(cat "$wallpaper_category_file")
    fi
}

function handleCategoryInput {
    wallpaper_category="$1"
    if [ ! "$wallpaper_category" ]; then
        wallpaper_category="$last_category"
    fi
}

function updateStateFile {
    caterogy="$1"
    echo "$caterogy" >"$wallpaper_category_file"
}

function selectRandomWallpaper {
    category="$1"
    # wallpaper=$(find "$wallpapers_dir/$category" -type f,l | shuf -n 1)
    wallpaper=$(find "$wallpapers_dir/$category" -type f | shuf -n 1)
}

#-------------------------------------------------------------------------------
# Xorg

function setNitrogen {
    monitors=$(xrandr --query | grep -e '\sconnected' | awk '{print $1}')

    for monitor in $monitors; do
        nitrogen --set-zoom-fill --random --head="$monitor" "$wallpapers_dir/$wallpaper_category"
    done
}

#-------------------------------------------------------------------------------
# Wayland

function setHyprPaper {
    monitors=$(hyprctl -j monitors | jq -r '.[].name')

    [ ! "$(pidof hyprpaper)" ] && hyprpaper &

    hyprctl hyprpaper unload all

    for monitor in $monitors; do
        selectRandomWallpaper "$wallpaper_category"
        hyprctl hyprpaper preload "$wallpaper"
        hyprctl hyprpaper wallpaper "$monitor,$wallpaper"
    done
}

function setWPaperD {
    config_file="$XDG_CONFIG_HOME/wpaperd/wallpaper.toml"
    sed -i "s|path = .*$|path = \"$wallpapers_dir/$wallpaper_category\"|" "$config_file"

    # restart wpaperd
    [ "$(pidof wpaperd)" ] && killall wpaperd
    wpaperd
}

#===============================================================================

getLastCategory
handleCategoryInput "$wallpaper_category"
updateStateFile "$wallpaper_category"

if [[ $XDG_SESSION_TYPE == "x11" ]]; then
    export DISPLAY=":0"
    setNitrogen
fi

if [[ $XDG_SESSION_TYPE == "wayland" ]]; then
    setWPaperD

    # if [[ $XDG_DESKTOP_SESSION == "hyprland" ]]; then
    # if [[ $XDG_CURRENT_DESKTOP == "Hyprland" ]]; then
    # if [[ $XDG_SESSION_DESKTOP == "Hyprland" ]]; then
    #     setHyprPaper
    # fi
fi
#+end_src

* toggle-lang
#+begin_src shell :tangle toggle-lang.sh
if [[ $XDG_SESSION_TYPE == "x11" ]]; then
    case $($HOME/.local/bin/get-lang.sh) in
        "us") new_lang="ru" ;;
        "ru") new_lang="jp" ;;
        "jp") new_lang="us" ;;
        ,*) new_lang="us" ;;
    esac

    $HOME/.local/bin/set-lang.sh $new_lang

    if [[ $new_lang == 'jp' ]]; then
        fcitx5-remote -o # enable japanese
    else
        fcitx5-remote -c # disable japanese
    fi
fi

if [[ $XDG_SESSION_TYPE == "wayland" ]]; then
    # if [[ $XDG_DESKTOP_SESSION == "hyprland" ]]; then
    # if [[ $XDG_SESSION_DESKTOP == "Hyprland" ]]; then
    if [[ $XDG_CURRENT_DESKTOP == "Hyprland" ]]; then
        case $($HOME/.local/bin/get-lang.sh) in
            "Japanese") fcitx5-remote -o ;; # enable japanese
            ,*) fcitx5-remote -c ;;          # disable japanese
        esac
    fi
fi
#+end_src

* toggle-mute
#+begin_src shell :tangle toggle-mute.sh
amixer -q sset Master toggle
#+end_src

* trigger-confirmation
#+begin_src shell :tangle trigger-confirmation.sh
prompt="$1"
echo -e "Yes\nNo" | rofi -dmenu -i -p "$prompt"
#+end_src

* trigger-countdown
#+begin_src shell :tangle trigger-countdown.sh
duration=$1
while (( $duration > 0 )); do
    notify-send "Starting recording in" "$duration"

    sleep 1
    dunstctl close
    ((duration--))
done
#+end_src

