#+TITLE: dm-scripts
#+AUTHOR: Artem Smaznov
#+DESCRIPTION: A collection of dmenu scripts
#+STARTUP: overview

* Table of Contents :toc:
- [[#grub-reboot-to-windows][GRUB Reboot to Windows]]
- [[#dm-master][dm-master]]
  - [[#setup][Setup]]
  - [[#dmenu][Dmenu]]
  - [[#handling-input][Handling Input]]
- [[#dm-notify][dm-notify]]
  - [[#dependencies][Dependencies]]
  - [[#setup-1][Setup]]
  - [[#dmenu-1][DMenu]]
  - [[#functions][Functions]]
  - [[#handling-input-1][Handling Input]]
- [[#dm-lock][dm-lock]]
  - [[#dependencies-1][Dependencies]]
  - [[#xorg-config][Xorg config]]
  - [[#setup-2][Setup]]
  - [[#dmenu-2][DMenu]]
  - [[#functions-1][Functions]]
- [[#dm-power][dm-power]]
  - [[#dependencies-2][Dependencies]]
  - [[#setup-3][Setup]]
  - [[#dmenu-3][DMenu]]
  - [[#functions-2][Functions]]
  - [[#handling-input-2][Handling Input]]
- [[#dm-screenshot][dm-screenshot]]
  - [[#dependencies-3][Dependencies]]
  - [[#setup-4][Setup]]
  - [[#dmenu-4][DMenu]]
  - [[#functions-3][Functions]]
  - [[#handling-input-3][Handling Input]]
- [[#dm-record][dm-record]]
  - [[#dependencies-4][Dependencies]]
  - [[#setup-5][Setup]]
  - [[#dmenu-5][DMenu]]
  - [[#functions-4][Functions]]
  - [[#handling-input-4][Handling Input]]
- [[#dm-wallpaper][dm-wallpaper]]
  - [[#dependencies-5][Dependencies]]
  - [[#test][Test]]
  - [[#setup-6][Setup]]
  - [[#dmenu-6][DMenu]]
  - [[#functions-5][Functions]]
  - [[#handling-input-5][Handling Input]]
- [[#dm-theme][dm-theme]]
  - [[#setup-7][Setup]]
  - [[#dmenu-7][DMenu]]
  - [[#helper-functions][Helper Functions]]
  - [[#handling-input-6][Handling Input]]
- [[#dm-lang][dm-lang]]
  - [[#setup-8][Setup]]
  - [[#helper-functions-1][Helper Functions]]
  - [[#handling-input-7][Handling Input]]

* GRUB Reboot to Windows
To reboot to windows without having to interact with grub during boot time create an executable shell script that will switch grub next 1 boot to a named entry, in my case it is a custom entry "*Windows 10*", but by default it be something like "*Windows boot manager*" as created by =os-prober=.
- Needs to be run as =sudo=
#+begin_src shell
# /home/user/.local/bin/winreboot

#!/usr/bin/env bash
grub-reboot "Windows 10" && systemctl reboot
#+end_src

If you want to call this from the Desktop Environment you may need to allow the script to be run without the =sudo= password. This can be achieved by adding it to your =sudoers= list as per below.
- It is recommended that you change the owner of the file to root and remove write permissions for other users so it cannot be changed without the root password as this can become a security vulnerability (anything in the script will be executed as =sudo= without a password prompt after all)
- This script is actually called in the [[#power][dmpower]] script with =sudo= to make use of this
#+begin_src conf
# /etc/sudoers.d/00-windows-reboot

user ALL=(ALL) NOPASSWD: /home/user/.local/bin/winreboot
#+end_src

* TODO dm-master
:PROPERTIES:
:header-args: :tangle dm-master
:END:
Not Working Yet!
Trigger any dm-script
** Setup
#+begin_src shell :shebang #!/usr/bin/env bash
declare -a options
#+end_src

Specify the location of dm-scripts
#+begin_src shell
dm_dir="$HOME/.local/bin/dm-scripts"
#+end_src

** Dmenu
#+begin_src shell
prompt="dm-script"
options=($(ls $dm_dir --hide="*.*" --hide="dm-master"))
#+end_src

** Handling Input
Present dmenu to user with options based on the available dmenu scripts
=printf '%s\n'= is used to format the array one item to a line to feed to =dmenu=
#+begin_src shell
# Prompt the user
choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "${prompt}")

# Act on user selection
[ $choice ] && $choice
#+end_src

* dm-notify
:PROPERTIES:
:header-args: :tangle dm-notify
:END:
Manage notifications
** Dependencies
|-------------+---------------------|
| App         | Comment             |
|-------------+---------------------|
| =rofi -dmenu= | Triggers dmenu      |
| =dunst=       | Notification server |
|-------------+---------------------|

** Setup
Get the number of notifications
#+begin_src shell :shebang #!/usr/bin/env bash
declare -a options
#+end_src

** DMenu
#+begin_src shell
prompt="Notifications"
options=(
    "Show recent"
    "Close"
    "Close all"
    "Context menu"
)
#+end_src

** Functions
#+begin_src shell
notif_count_history=$(dunstctl count history)
notif_count_displayed=$(dunstctl count displayed)
notif_count_wait=$(dunstctl count waiting)

execute_choice() {
    case $1 in
        close) dunstctl close;;
        clear) dunstctl close-all;;
        recents)
            for ((i = 1; i <= $notif_count_history; i++));
            do
                dunstctl history-pop
            done
            ;;
        ,*) dunstctl context;;
    esac
}
#+end_src

** Handling Input
Execute script without presenting dmenu to the user if any argument was passed
#+begin_src shell
[ ! $# -eq 0 ] && execute_choice $1 && exit
#+end_src

Present dmenu to user with options defined in the [[#dmenu][DMenu]] section
=printf '%s\n'= is used to format the array one item to a line to feed to =dmenu=
#+begin_src shell
choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "${prompt}")
#+end_src

What to do when/if we choose one of the options.
#+begin_src shell
case $choice in
    'Show recent') execute_choice recents ;;
    'Close') execute_choice close ;;
    'Close all') execute_choice close-all ;;
    'Context menu') execute_choice context ;;
esac
#+end_src

* dm-lock
:PROPERTIES:
:header-args: :tangle dm-lock
:END:
Trigger lock screen / screen saver
** Dependencies
|--------------+------------------------------|
| App          | Comment                      |
|--------------+------------------------------|
| =i3lock-color= | Screen Locker                |
| =xss-lock=     | Auto trigger external locker |
|--------------+------------------------------|

** Xorg config
Configure =/etc/X11/xorg.conf.d/10-monitor.conf=
#+begin_example conf
Section "Monitor"
    Identifier     "Monitor0"
    Option         "DPMS" "true"
EndSection

Section "ServerFlags"
    Option "StandbyTime" "20"
    Option "SuspendTime" "60"
    Option "OffTime" "0"
    Option "BlankTime" "0"
EndSection
#+end_example

** Setup
#+begin_src shell :shebang #!/bin/sh
time_format='%l:%M %p'
date_format='%d %b, %Y'

blank='#28282855'
text='#ebdbb2'
dark='#282828'
default='#fabd2fcc'
wrong='#fb4934bb'
verifying='#b8bb26cb'
type='#d65d0e'
delete='#cc241d'
#+end_src

** DMenu
#+begin_src shell
prompt="Lock Screen"
options=(
    "lock"
    "daemon"
)
#+end_src

** Functions
For debugging purposes add =--no-verif=
#+begin_src shell
i3lock \
    --clock \
    --screen 1 \
    --ignore-empty-password \
    --pass-media-keys --pass-screen-keys --pass-volume-keys \
    \
    --time-str="$time_format" --date-str="$date_format" \
    --greeter-text="Type password to unlock..." \
    --time-pos="w-w/2:y+200" --date-pos="tx:ty+50" \
    --layout-pos="ix:iy+100" \
    \
    --radius=200 --ring-width=10 \
    --time-size=120 --date-size=32 --layout-size=22 \
    --keylayout=2 \
    \
    --color=$blank \
    --time-color=$text --date-color=$text --greeter-color=$text --layout-color=$text --modif-color=$text         \
    \
    --separator-color=$default --line-color=$blank \
    --keyhl-color=$type --bshl-color=$delete \
    --ring-color=$default      --inside-color=$blank        \
    --ringver-color=$verifying --insidever-color=$verifying --verif-color=$dark          \
    --ringwrong-color=$wrong   --insidewrong-color=$wrong   --wrong-color=$dark
#+end_src

* dm-power
:PROPERTIES:
:header-args: :tangle dm-power
:END:
Power controls (Suspend, Reboot, Shutdown, etc.)
** Dependencies
|--------------+-------------------------|
| App          | Comment                 |
|--------------+-------------------------|
| =rofi -dmenu=  | Triggers dmenu          |
| =systemd=      | System management       |
| =xscreensaver= | Toggle screensaver      |
| =notify-send=  | Trigger a notifications |
|--------------+-------------------------|
** Setup
#+begin_src shell :shebang #!/usr/bin/env bash
declare -a options
#+end_src

Define =LOCKER= in =.xprofile= to set to different locker program
#+begin_src shell
# LOCKER="${LOCKER:-lock}"
LOCKER="$HOME/.local/bin/dm-scripts/dm-lock"
# LOCKER="xscreensaver-command -lock"

# use notify-send if run in dumb term
output="echo"
if [[ ${TERM} == 'dumb' ]]; then
    output="notify-send"
fi

yesno() {
    # shellcheck disable=SC2005
    echo "$(echo -e "No\nYes" | rofi -dmenu -i -p "${1}")"
}

declare -a managers=(
    "awesome"
    "bspwm"
    "dwm"
    "spectrwm"
    "xmonad"
    "qtile"
)
#+end_src

** DMenu
#+begin_src shell
prompt="Shutdown menu"
declare -a options=(
    "Suspend"
    "Reboot"
    "Shutdown"
    "Logout"
    "Lock screen"
    "Reboot to Windows"
    "Quit"
)
#+end_src

** Functions
Check [[#grub-reboot-to-windows][GRUB Reboot to Windows]] for the =winreboot= script setup
#+begin_src shell
execute_choice() {
    if [[ $1 == 'lock' ]]; then ${LOCKER}
    elif [[ $1 == 'reboot' ]]; then systemctl reboot
    elif [[ $1 == 'windows' ]]; then sudo $HOME/.local/bin/winreboot
    elif [[ $1 == 'poweroff' ]]; then systemctl poweroff
    elif [[ $1 == 'suspend' ]]; then systemctl suspend
    elif [[ $1 == 'quit' ]]; then ${output} "Program terminated." && exit 0
    else ${output} "Program terminated." && exit 0
    fi
}
#+end_src

** Handling Input
Execute script without presenting dmenu to the user if any argument was passed
#+begin_src shell
[ ! $# -eq 0 ] && execute_choice $1 && exit
#+end_src

Present dmenu to user with options defined in the [[#dmenu-1][DMenu]] section
=printf '%s\n'= is used to format the array one item to a line to feed to =dmenu=
#+begin_src shell
# Prompt the user
choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "${prompt}")
#+end_src

What to do when/if we choose one of the options.
#+begin_src shell
case $choice in
    'Logout')
        if [[ $(yesno "Logout?") == "Yes" ]]; then
            for manager in "${managers[@]}"; do
                killall "${manager}" || ${output} "Process ${manager} was not running."
            done
        else
            ${output} "User chose not to logout." && exit 1
        fi
        ;;
    'Lock screen') execute_choice lock ;;
    'Reboot')
        if [[ $(yesno "Reboot?") == "Yes" ]]; then
            execute_choice reboot
        else
            ${output} "User chose not to reboot." && exit 0
        fi
        ;;
    'Reboot to Windows')
        if [[ $(yesno "Reboot?") == "Yes" ]]; then
            execute_choice windows
        else
            ${output} "User chose not to reboot." && exit 0
        fi
        ;;
    'Shutdown')
        if [[ $(yesno "Shutdown?") == "Yes" ]]; then
            execute_choice poweroff
        else
            ${output} "User chose not to shutdown." && exit 0
        fi
        ;;
    'Suspend')
        if [[ $(yesno "Suspend?") == "Yes" ]]; then
            execute_choice suspend
        else
            ${output} "User chose not to suspend." && exit 0
        fi
        ;;
    'Quit') execute_choice quit ;;
    # It is a common practice to use the wildcard asterisk symbol (*) as a final
    # pattern to define the default case. This pattern will always match.
    ,*)
        exit 0
        ;;
esac
#+end_src

* dm-screenshot
:PROPERTIES:
:header-args: :tangle dm-screenshot
:END:
Take screenshots
** Dependencies
|-----------------+--------------------|
| App             | Comment            |
|-----------------+--------------------|
| =rofi -dmenu=     | Triggers dmenu     |
| =maim=            | Screenshot tool    |
| =xrandr=          | Screen management  |
| =xdotool=         | Get active window  |
| =xclip= / =wl-copy= | Save to clipboard  |
| =paplay=          | Play shutter sound |
|-----------------+--------------------|

** Setup
#+begin_src shell :shebang #!/usr/bin/env bash
# Set with the flags "-e", "-u","-o pipefail" cause the script to fail
# if certain things happen, which is a good thing.  Otherwise, we can
# get hidden bugs that are hard to discover.
set -euo pipefail
declare -a options
#+end_src

Specifying a directory to save our screenshots and make sure it exists
#+begin_src shell
screen_dir="$(xdg-user-dir PICTURES)/screenshots"
mkdir -p "${screen_dir}"
#+end_src

Filename Time Stamp Format
#+begin_src shell
timestamp='+%Y-%m-%d_%T'
#+end_src

Shutter sound file
#+begin_src shell
shutter="/usr/share/sounds/freedesktop/stereo/camera-shutter.oga" 
#+end_src

** DMenu
#+begin_src shell
prompt="Select what to screenshot"
options=(
    "full"
    "screen"
    "window"
    "area"
)
#+end_src

** Functions
*** Monitors
Get monitors and their settings for maim
#+begin_src shell
displays=$(xrandr --listactivemonitors | grep '+' | awk '{print $4, $3}' | awk -F'[x/+* ]' '{print $1,$2"x"$4"+"$6"+"$7}')
#+end_src

Add monitor data
#+begin_src shell
IFS=$'\n'
declare -A display_mode

for d in ${displays}; do
    name=$(echo "${d}" | awk '{print $1}')
    area="$(echo "${d}" | awk '{print $2}')"
    display_mode[${name}]="${area}"
done

unset IFS
#+end_src

*** Timestamp
#+begin_src shell
getTimeStamp() {
    date "$timestamp"
}
#+end_src

*** Active Window
#+begin_src shell
getActiveWindow() {
    xdotool getactivewindow
}
#+end_src

*** Clipboard
#+begin_src shell
saveToClipboard() {
    case "$XDG_SESSION_TYPE" in
        'x11') xclip -selection clipboard -t image/png;;
        'wayland') wl-copy -t image/png;;
        ,*) err "Unknown display server";;
    esac
}
#+end_src

*** Main
#+begin_src shell
main() {
    local maim_args=""

    case $1 in
        full) 
            message="Full desktop"
        ;;
        screen) 
            maim_args="--geometry=${display_mode['DVI-D-0']}"
            message="Main monitor"
        ;;
        window) 
            maim_args="--capturebackground -i $(getActiveWindow)" 
            message="Active window"
        ;;
        area) 
            maim_args="--capturebackground --select -n"
            message="Area selection"
        ;;
        ,*)
            echo -e "Only the following arguments are accepted:\n"
            printf '%s\n' "${options[@]}"
            exit 1
        ;;
    esac

    file_name="screenshot-$(getTimeStamp).png"

    maim -u ${maim_args} | tee "${screen_dir}/$file_name" | saveToClipboard || exit 1
    paplay "$shutter" & notify-send "Screenshot saved!" "$message"
}
#+end_src

** Handling Input
Execute script without presenting dmenu to the user if any argument was passed
#+begin_src shell
[ ! $# -eq 0 ] && main $1 && exit
#+end_src

Present dmenu to user with options defined in the [[#dmenu-2][DMenu]] section
=printf '%s\n'= is used to format the array one item to a line to feed to =dmenu=
#+begin_src shell
# Prompt the user
choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "${prompt}")

# Act on user selection
[ $choice ] && main $choice
#+end_src

* dm-record
:PROPERTIES:
:header-args: :tangle dm-record 
:END:
Record video/audio
** Dependencies
|-------------+--------------------------|
| App         | Comment                  |
|-------------+--------------------------|
| =rofi -dmenu= | Triggers dmenu           |
| =ffmpeg=      | Video converter/recorder |
| =slop=        | Window selector          |
|-------------+--------------------------|

** Setup
Tracking process
#+begin_src shell :shebang #!/usr/bin/env bash
rec_proc="/tmp/recordingpid"
#+end_src

Save File
#+begin_src shell
record_dir="$(xdg-user-dir VIDEOS)/recordings"
timestamp='+%Y-%m-%d_%T'
#+end_src

Video Settings
#+begin_src shell
resolution='1920x1080'
fps='30'
#+end_src

Audio Settings
#+begin_src shell
audio_device='alsa_output.usb-Focusrite_Scarlett_2i2_USB_Y86EP6H211E46C-00.analog-stereo.monitor'
#+end_src

** DMenu
#+begin_src shell
prompt="Record"
options=(
    "Screen"
    "Audio"
    "Camera"
)
#+end_src

** Functions
#+begin_src shell
yesno() {
    echo "$(echo -e "No\nYes" | rofi -dmenu -i -p "${1}")"
}
#+end_src
*** Recording Selection
#+begin_src shell
start_recording() {
    case "$1" in
        Screen) screen_capture;;
        Audio) audio_capture;;
        Camera) echo camera;;
        *) echo Invalid input;;
    esac
}
#+end_src

#+begin_src shell
stop_recording() {
    rec_pid="$(cat $rec_proc)"

    # kill with SIGTERM, allowing finishing touches.
    kill -15 "$rec_pid"
    rm -f $rec_proc

    # even after SIGTERM, ffmpeg may still run, so SIGKILL it.
    sleep 3
    kill -9 "$rec_pid"
    exit
}
#+end_src

*** Audio Capture
Check audio sources with
#+begin_example shell
pactl list sources | grep Name
#+end_example

#+begin_src shell
audio_capture() {
    ffmpeg \
        -f pulse -ac 2 -i $audio_device \
        -codec:a copy \
        $record_dir/dm-$(date $timestamp).wav &
    echo $! > $rec_proc
}
#+end_src

*** Screen Capture
#+begin_src shell
screen_capture() {
    ffmpeg \
        -video_size $resolution -framerate $fps \
        -f x11grab -i "$DISPLAY" \
        -f pulse -ac 2 -i $audio_device \
        -codec:v libx264 -preset ultrafast \
        -codec:a copy \
        $record_dir/dm-$(date $timestamp).mkv &
    echo $! > $rec_proc
}
#+end_src

** Handling Input
Check if there is an active recordings and prompt user to stop it
#+begin_src shell
if [ -f $rec_proc ]
then [ $(yesno "Stop Active Recording?") = "Yes" ] && stop_recording || exit
#+end_src

Check if any arguments were passed to the script to avoid triggering dmenu
#+begin_src shell
elif [ ! $# -eq 0 ]
#+end_src

Execute script without presenting dmenu to the user if an argument was passed
#+begin_src shell
then start_recording $1
#+end_src

If no arguments were passed, present dmenu to user
=printf '%s\n'= is used to format the array one item to a line to feed to =dmenu=
#+begin_src shell
else
    # Prompt the user
    choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "${prompt}")

    # Act on user selection
    [ $choice ] && start_recording $choice
fi
#+end_src

* dm-wallpaper
:PROPERTIES:
:header-args: :tangle dm-wallpaper
:END:
Set random wallpapers
** Dependencies
|-------------+----------------------|
| App         | Comment              |
|-------------+----------------------|
| =rofi -dmenu= | Triggers dmenu       |
| =xrandr=      | Screen management    |
| =nitrogen=    | Wallpaper management |
|-------------+----------------------|

** Test
#+begin_src shell :tangle dm-test :shebang #!/usr/bin/env bash
wall_dir="$HOME/Pictures/wallpapers"
test_dir="$wall_dir/gruvbox/*"

getWallpaperByTag() {
    for f in $test_dir; do
        match=$(exiftool $f | grep Keywords | awk -F': ' '{print $2}' | grep "$1")
        if [ "$match" ]; then
            echo $f
        fi
    done
}

whole_list() {
    exiftool $test_dir | grep -e "File Name" -e Keywords | awk -F': ' '{print $2}'
}

# getWallpaperByTag Logo
whole_list
#+end_src

** Setup
#+begin_src shell :shebang #!/usr/bin/env bash
declare -a options
#+end_src

Specifying a directory with wallpapers and make sure it exists
#+begin_src shell
wall_dir="$HOME/Pictures/wallpapers"
mkdir -p "${wall_dir}"
#+end_src

Path to script that calls =dmwallpaper= on startup
#+begin_src shell
autostart_script="$HOME/.config/autostart-scripts/autostart.sh"
autostart_script_org="$HOME/.config/README.org"
#+end_src

Get the number of connected screens
#+begin_src shell
screens=$(xrandr | grep -e "\sconnected" | wc -l)
#+end_src

** DMenu
#+begin_src shell
prompt="Wallpaper Category"
options=($(ls $wall_dir --hide="*.*"))
#+end_src

** Functions
I am using a shell script to call =dm-wallpaper= to set random wallpapers from a set sub-directory, which is being called on WM start.
- [[file:~/.config/README.org::*Auto-start][Auto-start]] ([[https://github.com/ArtemSmaznov/Dotfiles/tree/master/.config][repo]])

=updateAutostart= updates the directory in that script every time I call =dm-wallpaper= to set a different sub-directory.

As long as you specify the correct path to the dmscript there and the dmscript is named =dm-wallpaper= it will update it automatically. All you really need to do is set =autostart_script= variable to the correct path to the auto-start script.

The function is agnostic to the path to =dm-wallpaper=, so as long as the dmscript is named =dm-wallpaper=, it will be updated automatically. All you really need to do is set =autostart_script= variable to the correct path to the auto-start script.

#+begin_src shell
updateAutostart() {
    sed -i "s/\(.*dm-wallpaper\).*$/\1 $1 \&/" $autostart_script
    sed -i "s/\(.*dm-wallpaper\).*$/\1 $1 \&/" $autostart_script_org
}

setRandomWallpaper() {
    for (( i = 0; i < $screens; i++ )); do
        nitrogen --set-zoom-fill --random --head=$i $wall_dir/$1/
    done

    # Comment out this line if you don't use an autostart script to set random wallpapers using this dmscript
    updateAutostart "$1"
}
#+end_src

** Handling Input
Execute script without presenting dmenu to the user if any argument was passed
#+begin_src shell
[ ! $# -eq 0 ] && setRandomWallpaper $1 && exit
#+end_src

Present dmenu to user with options based on the available sub-directories in =$wall_dir=
=printf '%s\n'= is used to format the array one item to a line to feed to =dmenu=
#+begin_src shell
# Prompt the user
choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "${prompt}")

# Act on user selection
[ $choice ] && setRandomWallpaper $choice
#+end_src

* dm-theme
:PROPERTIES:
:header-args: :tangle dm-theme
:END:
Change color scheme of all applications (configured in the [[#setup-7][Setup]] section) for a
more unified look of your desktop environment. Each application needs to have
themes configured/available for it to be affected, so a bit of manual work is
still required in setting up available themes. Once that is done though,
switching is effortless.

Scrips does not handle extra steps a particular application might require to
apply the theme (e.g. WM restart).

** Setup
#+begin_src shell :shebang #!/usr/bin/env bash
declare -A config t_path regexp readme
anyThemeChanged=false
#+end_src

|-------------------+------------------------------------------------------------------------------------------------------|
| Parameter         | Description                                                                                          |
|-------------------+------------------------------------------------------------------------------------------------------|
| =readme= (optional) | Path to Emacs's Org mode config                                                                      |
| =config=            | Path to config where theme is set                                                                    |
| =t_path=            | Path to the Themes/Colors directory                                                                  |
| =regexp=            | Regex to update the theme name in the main config. Requires grouping before and after the theme name |
|-------------------+------------------------------------------------------------------------------------------------------|

*** Alacritty
#+begin_src shell
config_path="$HOME/.config/alacritty"
readme["alacritty"]="$config_path/README.org"
config["alacritty"]="$config_path/alacritty.yml"
t_path["alacritty"]="$config_path/themes"
regexp["alacritty"]="\(- \~\/\.config\/alacritty\/themes\/\)\w\+\(\.yml\)"
#+end_src

*** Rofi
#+begin_src shell
config_path="$HOME/.config/rofi"
readme["rofi"]="$config_path/README.org"
config["rofi"]="$config_path/config.rasi"
t_path["rofi"]="$config_path/themes"
regexp["rofi"]="\(\@import \"themes\/\)\w\+\(\.rasi\)"
#+end_src

*** Vimiv
#+begin_src shell
config_path="$HOME/.config/vimiv"
readme["vimiv"]="$config_path/README.org"
config["vimiv"]="$config_path/vimiv.conf"
t_path["vimiv"]="$config_path/styles"
regexp["vimiv"]="\(style = \)\w\+\(\.conf\)"
#+end_src

*** qTile
#+begin_src shell
config_path="$HOME/.config/qtile"
config["qtile"]="$config_path/theme/default.py"
t_path["qtile"]="$config_path/theme/colors"
regexp["qtile"]="\(import theme\.colors\.\)\w\+\( as color\)"
#+end_src

*** STRT XMonad
There are some errors in the terminal when selecting Gruvbox ones but not the Dracula color scheme
#+begin_src shell
config_path="$HOME/.xmonad"
readme["xmonad"]="$config_path/README.org"
config["xmonad"]="$config_path/xmonad.hs"
t_path["xmonad"]="$config_path/lib/Colors"
regexp["xmonad"]="\(import Colors\.\)\w\+\(\)"
#+end_src

*** QuteBrowser
#+begin_src shell
config_path="$HOME/.config/qutebrowser"
config["qutebrowser"]="$config_path/themes/default.py"
t_path["qutebrowser"]="$config_path/colors"
regexp["qutebrowser"]="\(import colors\.\)\w\+\( as color\)"
#+end_src

*** STRT Xresources
*** STRT ViFM
*** TODO Vim
*** TODO Emacs
*** TODO GRUB
** DMenu
Options presented in DMenu are taken and combined from all the theme directories
of target applications. This required all applications to have a separate
directory with all the themes/color schemes. There is no need for a particular
color scheme to be available for all the applications, as the script will check
each one and skip any that don't have the selecting theme available.

It is recommended to have the same color scheme files be named the same
(excluding extensions) across applications. Otherwise, you will need to trigger
the scrip multiple times to update all of your applications to the same color
scheme.

=grep= expression is excluding some of the the files that might exist in such
folders (e.g. Python's =__pycache__=). Additionally, avoid having special
characters in the names as well as (at least in my case) so of the applications
use imports for selecting themes, which does not play nicely with non-plain file
names.

=awk= expression removes file extensions so avoid having extra dots in the file
names of individual color schemes as it can break this script

#+begin_src shell
prompt="Color Scheme"
options=($(ls ${t_path[*]} | grep -v -e{"__",":$","^$"} | awk -F'.' '{print $1}' | sort -u))
#+end_src

** Helper Functions
Checks if a particular application has the selected theme available so that the
next function doesn't change any configs to non-existent themes.
#+begin_src shell
themeIsAvailable() {
    if [ ! $(ls -d ${t_path[$1]}/*$2* 2>/dev/null) ]; then
        echo Warning: $2 color scheme not found in \[$1\] - theme not changed!
        return 1; fi

    return 0
}
#+end_src

If an application has the selected theme available, this will change the defined
config file (and optionally the Org mode config) to point to the new theme file.
#+begin_src shell
change_app_theme() {
    # Check first if the selected colorscheme exests for the particula app before changing the config
    if ! themeIsAvailable $1 $2; then return; fi
    sed -i "s/${regexp[$1]}/\1$2\2/" "${config[$1]}"
    anyThemeChanged=true

    # Check if README file was defined before attempting to change it
    if [ ! $(echo "${readme[$1]}") ]; then return; fi
    sed -i "s/${regexp[$1]}/\1$2\2/" "${readme[$1]}"
}
#+end_src

Main function that is called by the script. It triggers theme switching and
reports if none were updated.
#+begin_src shell
set_global_theme() {
    for app in ${!config[@]}; do change_app_theme ${app} $1; done
    if ! $anyThemeChanged; then 
        echo Error: $1 color scheme was not found in any of the apps - no themes were updated! 
        exit 1
    fi
}
#+end_src

** Handling Input
Check if any arguments were passed to the script to avoid triggering dmenu
#+begin_src shell
if [ ! $# -eq 0 ]; then
    set_global_theme $1
#+end_src

If no arguments were passed, present dmenu to user with options defined in the [[#dmenu-2][DMenu]] section
#+begin_src shell
else
    # Prompt the user
    choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "${prompt}")

    # Act on user selection
    if [ $choice ]; then set_global_theme $choice; fi
fi
#+end_src

* dm-lang
:PROPERTIES:
:header-args: :tangle dm-lang 
:END:
** Setup
#+begin_src shell :shebang #!/usr/bin/env bash
current_lang=$(setxkbmap -query | awk 'END{print $2}')
#+end_src

** Helper Functions
#+begin_src shell
next_lang() {
    case $current_lang in
        us) setxkbmap ru;;
        ru) setxkbmap us;;
        ,*) setxkbmap us;;
    esac
}

set_lang() {
    setxkbmap $1
}
#+end_src

** Handling Input
Check if any arguments were passed to the script to avoid triggering dmenu
#+begin_src shell
if [ ! $# -eq 0 ]; then
    set_lang $1
#+end_src

#+begin_src shell
else
    next_lang
fi
#+end_src
